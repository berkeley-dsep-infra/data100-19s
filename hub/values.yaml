jupyterhub:
  scheduling:
    userScheduler:
      enabled: true
  proxy:
    https:
      letsencrypt:
        contactEmail: rylo@berkeley.edu
  singleuser:
    defaultUrl: "/lab"
    initContainers:
      - name: volume-mount-hack
        image: busybox
        command: ["sh", "-c", "id && chown 1000:1000 /home/jovyan && ls -lhd /home/jovyan"]
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: home
          mountPath: /home/jovyan
          subPath: "home/{username}"
    storage:
      type: static
      static:
        pvcName: home-nfs
        subPath: "home/{username}"
  hub:
    db:
      pvc:
        # This also holds logs
        storage: 40Gi
    extraConfig:
      01-custom-attr-spawner: |
        from kubespawner import KubeSpawner
        from tornado import gen
        import yaml
        import os
        import z2jh

        class CustomAttrSpawner(KubeSpawner):

          @gen.coroutine
          def start(self):
            if os.path.exists('/etc/jupyterhub/config/custom.memory'):
              with open('/etc/jupyterhub/config/custom.memory') as f:
                custom_attr_lists = yaml.safe_load(f)
                for attr, users in custom_attr_lists.items():
                  if self.user.name in users:
                    self.mem_limit = attr
                    self.mem_guarantee = attr
                    break

            # new style
            custom_memory = z2jh.get_config('custom.memory', {})
            for attr, users in custom_memory.items():
              if self.user.name in users:
                self.mem_limit = attr
                self.mem_guarantee = attr
                break
                
            return (yield super().start())

        c.JupyterHub.spawner_class = CustomAttrSpawner

        c.JupyterHub.extra_log_file = '/srv/jupyterhub/jupyterhub.log'

      02-lab-availability: |
        c.Spawner.cmd = ['jupyter-labhub']

homeDirectories:
  nfs:
    serverPath: "/homes"
