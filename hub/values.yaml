nfsMounter:
  enabled: true

jupyterhub:
  prePuller:
    continuous:
      enabled: true
    hook:
      enabled: false
  #cull:
  #  enabled: false
  scheduling:
    userScheduler:
      enabled: true
  proxy:
    https:
      letsencrypt:
        contactEmail: rylo@berkeley.edu
  singleuser:
    defaultUrl: "/tree"
    storage:
      type: hostPath
    #initContainers:
    #  - name: volume-mount-hack
    #    image: busybox
    #    command: ["sh", "-c", "id && chown 1000:1000 /home/jovyan && ls -lhd /home/jovyan"]
    #    securityContext:
    #      runAsUser: 0
    #    volumeMounts:
    #    - name: home
    #      mountPath: /home/jovyan
    #      subPath: "home/{username}"
      #type: static
      #static:
      #  pvcName: home-nfs
      #  subPath: "home/{username}"
  hub:
    db:
      pvc:
        # This also holds logs
        storage: 40Gi
    extraConfig:
      01-custom-attr-spawner: |
        from kubespawner import KubeSpawner
        from tornado import gen
        import z2jh

        class CustomAttrSpawner(KubeSpawner):

          @gen.coroutine
          def start(self):
            custom_memory = z2jh.get_config('custom.memory', {})
            for attr, users in custom_memory.items():
              if self.user.name in users:
                self.mem_limit = attr
                self.mem_guarantee = attr
                break
                
            return (yield super().start())

        c.JupyterHub.spawner_class = CustomAttrSpawner

        c.JupyterHub.extra_log_file = '/srv/jupyterhub/jupyterhub.log'

      02-lab-availability: |
        c.Spawner.cmd = ['jupyter-labhub']

      # AKS by default sets the k8s master host to a public hostname,
      # that is fronted by AWS LB. This causes read timeouts frequently.
      # Attempt to work around this with https://github.com/jupyterhub/kubespawner/issues/282
      03-aks-local: |
        import os
        os.environ['KUBERNETES_SERVICE_HOST'] = 'kubernetes.default.svc.cluster.local'

homeDirectories:
  nfs:
    serverPath: "/homes"
